<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="xyz.itwill.mapper.UserMapper">

<!-- 회원인증키 수동맵핑 -->
<resultMap type="UsersAuth" id="userAuthResultMap">
		<result column="auth_key" property="authKey"/>
		<result column="auth_status" property="authStatus"/>
</resultMap>


<!-- 회원정보 삽입 -->
<insert id="insertUsers">
    insert into users values(#{id},#{pw},#{name},#{email},#{phone},#{birthday},#{zipcode}
     ,#{address1},#{address2},sysdate,1)
</insert>

<!-- 회원정보 수정 -->
<update id="updateUsers">
 update users
 <set>
    <if test="name!=null and name!=''">
    name=#{name},
    </if>
    <if test="birthday!=null and birthday!=''">
    birthday=#{birthday},
    </if>
    <if test="email!=null and email!=''">
    email=#{email},
    </if>
    <if test="phone!=null and phone!=''">
    phone=#{phone},
    </if>
    <if test="zipcode!=null and zipcode!=''">
    zipcode=#{zipcode},
    </if>
    <if test="address1!=null and address1!=''">
    address1=#{address1},
    </if>
    <if test="address2!=null and address2!=''">
    address2=#{address2},
    </if>
 </set>    
   where id=#{id}
</update>

<!-- 회원 상태 변경(탈퇴회원) -->
<update id="updateUsersStatus">
     update users set status=0 where id=#{id}
</update>

<!-- 회원정보 검색 : 관리자 / 회원 : 로그인시 -->
<!-- 단일행 검색 -->
<select id="selectUsersId" resultType="Users">
      select * from users where id=#{id}
</select>

<!-- ★추가 -->
<!-- 회원 비밀번호 찾기 -->
	<select id="selectUserfindpw" resultType="Users">
		select * from users where id=#{id} and email=#{email}
	</select>
	
<!-- 회원 이름과 이메일로 아이디 찾기 -->
<!-- 단일행 검색 -->
<select id="selectUsersEmail" parameterType="string" resultType="Users">
     <!--  select * from users where email=#{email} and name=#{name} -->
     <!--  select * from users where name=#{name} and email=#{email} -->
      select * from users where name=#{name} and email=#{email}
</select>

<!-- ★추가 -->
<!-- 인증키 업데이트 -->
<update id="updateAuthKey">
		update users set auth_key = #{authKey} where id = #{id}
</update> 
	
<!-- ★추가 -->
<!-- 인증상태 업데이트 -->
<update id="updateAuthStatus">
		update users set auth_status = 1 where id = #{id}
</update> 
	
<!-- ★추가 -->
<!-- 임시 비밀번호 업데이트 -->
<update id="updatePassword">
		update users set pw=#{pw} where id = #{id}
</update> 
	
<!-- ★추가 -->	
<!-- 회원 정보 업데이트 -->
<update id="updateUserInfo">
		update users
		<set>
			<if test="pw!=null and pw!=''">
				password=#{password},
			</if>
			<if test="name!=null and name!=''">
				name=#{name},
			</if>
		</set>
		where id=#{id}
</update>

<!-- 전체 회원 아이디순으로 검색 -->
<!-- 다중행 검색 -->
<select id="selectAllUsers" resultType="Users">
      select * from users order by id
</select>




<!--***********************관리자 페이지***********************-->
<!-- 오늘 가입한 회원수(탈퇴회원 제외)검색 -->   
<select id="selectTodayUsersCount" resultType="int">
	<![CDATA[
	      select count(*) from users where joindate>=to_char(sysdate,'YYYYMMDD') and status!=0
	]]>
</select>      

<!-- 오늘 가입한 회원 목록 검색 -->
<select id="selectTodayUsersList" resultType="Users">
	<![CDATA[
	      select * from users where joindate>=to_char(sysdate,'YYYYMMDD') and status!=0 order by id
	]]>
</select> 


<!-- 검색기능 X -->
<!-- 전체 회원 수 검색(탈퇴회원 제외) -->
<select id="selectUsersCount" resultType="int">
      select count(*) from users where status!=0 order by id
</select>   


<!-- 전체 회원 목록 검색(탈퇴회원 제외) -->
<select id="selectUsersList" resultType="Users">
      select * from (select rownum rn, temp.* from (select * from users where status!=0 order by id) temp)
      where rn between #{start} and #{end}
</select> 


<!-- 검색기능 -->
<!-- 검색한 회원 수 검색(미검색 시 전체 회원 수) -->
<select id="selectSearchUsersCount" parameterType="map" resultType="int">
	select count(*) from users
	<where>
		<if test="searchId!=null and searchId!=''">
			id like '%'||#{searchId}||'%'
		</if>
		<if test="searchName!=null and searchName!=''">
			name like '%'||#{searchName}||'%'
		</if>
	</where>
	order by id
</select>

<!-- 검색한 회원 목록 검색(미검색 시 전체 회원 목록) -->
<select id="selectSearchUsersList" parameterType="map" resultType="Users">
	select * from (select rownum rn, temp.* from (select * from users 
	<where>
		<if test="searchId!=null and searchId!=''">
			id like '%'||#{searchId}||'%'
		</if>
		<if test="searchName!=null and searchName!=''">
			name like '%'||#{searchName}||'%'
		</if>
	</where>
	order by id) temp) where rn between #{startRow} and #{endRow}
</select>

</mapper>



